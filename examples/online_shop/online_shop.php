<?php declare(strict_types=1);

/**
 * Online Shop Example
 *
 * This is an example of a simple engine responding to events generated by an online store and triggering emails
 *
 * It includes simple Rules (New Order -> Send Order Received emails)
 * Rules with timeouts (CheckOrderPayment -> If Order Payment not received by timeout period emits a timeout event)
 *
 */

use Bref\Logger\StderrLogger;
use EdgeTelemetrics\EventCorrelation\Scheduler;
use Psr\Log\LogLevel;

use function EdgeTelemetrics\EventCorrelation\php_cmd;

include __DIR__ . "/../../vendor/autoload.php";

include __DIR__ . "/rules/CheckOrderPayment.php";
include __DIR__ . "/rules/OrderPaidSendCustomerReceipt.php";
include __DIR__ . "/rules/OrderPaymentReminder.php";
include __DIR__ . "/rules/OrderReceivedSendCustomerEmail.php";
include __DIR__ . "/rules/OrderReceivedSendShopEmail.php";

$rules = [
    CheckOrderPayment::class,
    OrderPaidSendCustomerReceipt::class,
    OrderPaymentReminder::class,
    OrderReceivedSendCustomerEmail::class,
    OrderReceivedSendShopEmail::class,
];

//Delete any statefile that may exist on subsequent runs
if (file_exists("/tmp/php_ec-online-shop-example.state")) {
    unlink("/tmp/php_ec-online-shop-example.state");
}

$online_shop_engine = new class($rules) extends Scheduler {
    public function __construct(array $rules)
    {
        parent::__construct($rules);
        set_exception_handler([$this, "handle_exception"]);
        $this->setLogger(new StderrLogger(LogLevel::DEBUG));

        $this->register_input_process('webstore_event_stream', php_cmd(__DIR__ . "/sources/webstore_events.php"));

        $this->register_action('send-email', php_cmd(__DIR__ . "/actions/echo.php"));

        $this->setSavefileName("/tmp/php_ec-online-shop-example.state");
        $this->setSaveStateInterval(1);
    }

    public function handle_exception(Throwable $exception) {
        $this->logger->emergency("Fatal", ['exception' => $exception,]);
    }
};

$online_shop_engine->run();